#!/usr/bin/python
# Open Global Server Load Balancer (ogslb)
# Copyright (C) 2010 Mitchell Broome
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os, sys, glob, imp

# figure out where the script is so we can setup paths relative to it
scriptPath = os.path.realpath(os.path.dirname(sys.argv[0]))

# account for where we live
sys.path.append(scriptPath + '/..')
sys.path.append(scriptPath + '/../lib')
sys.path.append(scriptPath + '/../proto')

from background import *
#createDaemon()

import logging
import logging.handlers
import xml.dom.minidom
import threading
import Queue
import random
#import time
from time import *
import signal
import pprint
import getopt

import ParseConfig
import ParseXML
from Responder import *
from Poller import *
from Stats import *

# setup pprint for debugging
pp = pprint.PrettyPrinter(indent=4)

# define how many threads of each type we should fire up
maxPoller=10
maxResponder=4

# setup the different queues
pollerQueue = Queue.Queue(0)
responderQueue = Queue.Queue(0)

# trap ctrl+c
def signal_handler(signal, frame):
   print 'You pressed Ctrl+C!'
   sys.exit(0)

def watchThreads():
   threadcount = len(threading.enumerate())
   if threadcount < maxThreadsRunning:
#      logger.debug("thread died: %s" % threadcount)
      main_thread = threading.currentThread()
      for t in threading.enumerate():
         if t is main_thread:
            continue
#         pp.pprint("thread: %s" % t.getName())
         logger.debug("thread: %s" % t.getName())
         
# guess what we do here
def usage():
   print """ogslbd: Open Global Server Load Balancer
Mitchell Broome (mitchell.broome@gmail.com)

ogslbd [-c=/path/to/config.xml] [-l=/path/to/logfile] [-d] [-?]

-c	Config file.  Default: /opt/ogslb/etc/config.xml
-l	Log file.  Default: /var/log/ogslb.log
-d	Enable debugging
-?	Print help

"""

# the main program
def main(argv):
   global maxResponder
   signal.signal(signal.SIGINT, signal_handler)

   # define some defaults
   configFile = scriptPath + '/../etc/config.xml'
   pollerFile = scriptPath + '/../etc/poller.xml'
   debug = 0
   overrideLogFile = ''

   # parse the command line arguments
   try:
      opts, args = getopt.getopt(argv, "hc:l:d", ['config=', 'help', 'log=', 'debug'])
   except getopt.GetoptError:
      usage()
      sys.exit(2)

   # override defaults based on command line arguments
   for opt, arg in opts:
      if opt in ('-h', '--help'):
         usage()
         sys.exit()
      elif opt == '-d':
         debug = 1
      elif opt in ('-l', '--log'):
         overrideLogFile = arg
      elif opt in ('-c', '--config'):
         configFile = arg

   # load up the configs
   Config = ParseConfig.parseConfig(configFile);

   # set the logfile to use
   try:
      logFile = Config['logfile']
   except:
      logFile = '/var/log/ogslb.log'

   if overrideLogFile:
      logFile = overrideLogFile

   # setup the logger
   logger = logging.getLogger("ogslb")
   if(debug):
      logger.setLevel(logging.DEBUG)
   else:
      logger.setLevel(logging.INFO)

   ch = logging.handlers.RotatingFileHandler(logFile, maxBytes=25000000, backupCount=5)

   if(debug):
      ch.setLevel(logging.DEBUG)
   else:
      ch.setLevel(logging.INFO)

   formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
   ch.setFormatter(formatter)
   logger.addHandler(ch)

   # and now start up the logger
   logger.info("startup: db type: %s" % BackendType)

   # parse the poller config
   vips = ParseXML.parseXML(pollerFile)

   # for each of the hostnames we are monitoring, we stick the name in redis
   # that way, we can associate which timeseries keys we are monitoring
   stats = Stats(Config);
   stats.sexpire("stats.hostlist")
   for v in vips:
      stats.sput("stats.hostlist", v)


   # setup the poller thread pool
   for i in range(maxPoller):
      Poller(pollerQueue, Config, responderQueue, i).start() # start a worker

   # setup the responder thread pool
   if BackendType == "sqlite":
      maxResponder = 1
   for i in range(maxResponder):
      Responder(responderQueue, Config, i).start() # start a worker


   # start looping pushing jobs into the queue
   passCounter = 0
   while(True):
      # reload poller.xml
      vips = ParseXML.parseXML(pollerFile)
      for vip in vips:
         stats.sput("stats.hostlist", v)
         for data in vips[vip]['data']:
            pollerQueue.put((vip, data, passCounter))

      passCounter = passCounter + 1

      # we push jobs into the queue every 30 seconds
      # this effectivly makes us do healtchecks every 30 seconds
      sleep(30)


# start up main()
if __name__ == "__main__":
   main(sys.argv[1:])

